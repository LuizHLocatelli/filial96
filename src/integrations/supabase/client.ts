
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://abpsafkioslfjqtgtvbi.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFicHNhZmtpb3NsZmpxdGd0dmJpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5Njg3ODIsImV4cCI6MjA2MTU0NDc4Mn0.UTF4Gi6rDxQ2a3Pf4J2-7J0yPokcks6J8xO93GEhk-w";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    realtime: {
      params: {
        eventsPerSecond: 10
      }
    },
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true
    },
    global: {
      headers: {
        'x-application-name': 'lovable-manager-app',
      },
    }
  }
);

// Verificação inicial do Supabase e buckets
let bucketStatus = {
  checked: false,
  available: false,
  message: "Verificando disponibilidade do armazenamento..."
};

export async function checkBucketAvailability() {
  try {
    console.log("Verificando a existência do bucket 'attachments'...");
    
    // Verificar se o bucket existe
    const { data: buckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      console.error("Erro ao listar buckets:", listError);
      bucketStatus = {
        checked: true,
        available: false,
        message: `Erro ao verificar buckets: ${listError.message}`
      };
      return bucketStatus;
    }
    
    const bucketExists = buckets?.some(bucket => bucket.name === "attachments");
    
    if (!bucketExists) {
      console.warn("O bucket 'attachments' não foi encontrado no Supabase.");
      
      bucketStatus = {
        checked: true,
        available: false,
        message: "O bucket 'attachments' não foi encontrado. Crie-o no console do Supabase."
      };
      return bucketStatus;
    }
    
    // Com RLS desativado, verificamos com uma simples listagem
    try {
      const { error: listFilesError } = await supabase.storage
        .from("attachments")
        .list();
      
      if (listFilesError && !listFilesError.message.includes("No such object")) {
        console.warn("Problema ao acessar arquivos no bucket:", listFilesError);
        bucketStatus = {
          checked: true,
          available: false,
          message: `Bucket encontrado, mas há problemas de permissão: ${listFilesError.message}`
        };
        return bucketStatus;
      }
      
      console.log("Bucket 'attachments' encontrado e permissões verificadas com sucesso.");
      bucketStatus = {
        checked: true,
        available: true,
        message: "Bucket 'attachments' está disponível e configurado corretamente."
      };
      return bucketStatus;
    } catch (error: any) {
      console.warn("Erro ao verificar permissões do bucket:", error);
      bucketStatus = {
        checked: true,
        available: false,
        message: `Bucket encontrado, mas há problemas de permissão: ${error.message || "Erro desconhecido"}`
      };
      return bucketStatus;
    }
  } catch (error: any) {
    console.error("Erro ao inicializar verificação do bucket:", error);
    bucketStatus = {
      checked: true,
      available: false,
      message: `Erro ao verificar bucket: ${error.message || "Erro desconhecido"}`
    };
    return bucketStatus;
  }
}

// Iniciar verificação do bucket logo que o cliente é carregado
checkBucketAvailability();
